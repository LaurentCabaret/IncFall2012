C51 COMPILER V9.05   KMODACL                                                               10/15/2012 11:41:51 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE KMODACL
OBJECT MODULE PLACED IN KmodACL.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe KmodACL.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          #include "I2CLib.h"
   2          #include "KmodACL.h"
   3          
   4          int AccX,AccY,AccZ;
   5          
   6          void GetAcc(void) {
   7   1         // Reset Timeout flag
   8   1         SMB_TIMEOUT = 0;
   9   1      
  10   1         // Send command
  11   1         SMB_DATA_OUT[0] = 0x32;          // Command byte
  12   1         TARGET = KMODACL_ADDR;            // Target the Slave for next SMBus
  13   1                                         // transfer
  14   1         SMB_Write();                    // Initiate SMBus write
  15   1      
  16   1         // Read response
  17   1            TARGET = KMODACL_ADDR;            // Target the Slave for next SMBus
  18   1                                            // transfer
  19   1            ByteRequested = 6;           // Size of the answer
  20   1            T0_Waitms (10);               // Wait for the request to be processed
  21   1            SMB_Read();                     // Read the answer
  22   1         
  23   1         
  24   1         AccX = SMB_DATA_IN[0] + (int)SMB_DATA_IN[1]<<8;
  25   1         AccY = SMB_DATA_IN[2] + (int)SMB_DATA_IN[3]<<8;
  26   1         AccZ = SMB_DATA_IN[4] + (int)SMB_DATA_IN[5]<<8;
  27   1      }
  28          
  29          
  30          
  31          
  32          
  33          void StartACC(void)
  34          {   
  35   1         send_acc_command_to_specific_register(0x38,0x00);
  36   1         send_acc_command_to_specific_register(0x31,0x0F);
  37   1         send_acc_command_to_specific_register(0x2C,0x04);
  38   1         send_acc_command_to_specific_register(0x2D,0x00);
  39   1         send_acc_command_to_specific_register(0x2D,0x10);
  40   1         send_acc_command_to_specific_register(0x2D,0x08);
  41   1      }
  42          
  43          unsigned char GetAccID(void)
  44          {
  45   1         send_acc_command(0x00, 1, 10);
  46   1         return SMB_DATA_IN[0];
  47   1      
  48   1      }
  49          
  50          //---------------------------------------------------------------
  51          // Communication with the ACC module
  52          //---------------------------------------------------------------
  53          void send_acc_command(unsigned char cmd, unsigned char size, unsigned char wait) {
  54   1         // Reset Timeout flag
  55   1         SMB_TIMEOUT = 0;
C51 COMPILER V9.05   KMODACL                                                               10/15/2012 11:41:51 PAGE 2   

  56   1      
  57   1         // Send command
  58   1         SMB_DATA_OUT[0] = cmd;          // Command byte
  59   1         TARGET = KMODACL_ADDR;            // Target the Slave for next SMBus
  60   1                                         // transfer
  61   1         SMB_Write();                    // Initiate SMBus write
  62   1      
  63   1      
  64   1         // Read response
  65   1         if (size > 0) {
  66   2            TARGET = KMODACL_ADDR;            // Target the Slave for next SMBus
  67   2                                            // transfer
  68   2            ByteRequested = size;           // Size of the answer
  69   2            T0_Waitms (wait);               // Wait for the request to be processed
  70   2            SMB_Read();                     // Read the answer
  71   2         }
  72   1      }
  73          
  74          void send_acc_command_to_specific_register(unsigned char theregister,unsigned char cmd) {
  75   1         // Reset Timeout flag
  76   1         SMB_TIMEOUT = 0;
  77   1      
  78   1         // Send command
  79   1         SMB_DATA_OUT[0] = theregister;          // Command byte
  80   1         SMB_DATA_OUT[1] = cmd;          // Command byte
  81   1         TARGET = KMODACL_ADDR;            // Target the Slave for next SMBus
  82   1                                         // transfer
  83   1         SMB_Write();                    // Initiate SMBus write
  84   1      }
  85          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    202    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
